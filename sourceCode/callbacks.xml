<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="simIGL" author="federico.ferri.it@gmail.com">
    <description>Wrapper for libigl</description>
    <command name="meshBoolean">
        <description>Compute several boolean operations on the meshes specified by vertices and (triangle) indices</description>
        <categories>
            <category name="boolean-ops" />
        </categories>
        <params>
            <param name="a" type="mesh">
                <description>first mesh</description>
            </param>
            <param name="b" type="mesh">
                <description>second mesh</description>
            </param>
            <param name="op" type="int">
                <description>operation, see <enum-ref name="boolean_op" /></description>
            </param>
        </params>
        <return>
            <param name="result" type="mesh">
                <description>resulting mesh</description>
            </param>
        </return>
    </command>
    <command name="randomPointsOnMesh">
        <description>Randomly sample a mesh n times</description>
        <params>
            <param name="n" type="int">
                <description>num samples</description>
            </param>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="convertToWorldCoords" type="bool" default="false">
                <description>if true, output will be in world coords and not in barycentric coords</description>
            </param>
        </params>
        <return>
            <param name="b" type="grid" item-type="double" size="*,3">
                <description>list of barycentric/world coordinates, ith row are coordinates of ith sampled point in face FI[i]</description>
            </param>
            <param name="fi" type="grid" item-type="int">
                <description>list of indices into F</description>
            </param>
        </return>
    </command>
    <command name="sweptVolume">
        <description>Generate a volume-sweep mesh</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="transformFunc" type="string">
                <description>rigid transform as a function of time (0..1); must return a 4x4 transform matrix as 12/16 values</description>
            </param>
            <param name="timeSteps" type="int">
                <description>number of time steps</description>
            </param>
            <param name="gridSize" type="int">
                <description>size of voxel grid internally used for mesh generation</description>
            </param>
            <param name="isoLevel" type="double" default="0">
                <description>can be set to zero to approximate the exact swept volume, greater than zero to approximate a positive offset of the swept volume or less than zero to approximate a negative offset</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>volume-sweep mesh</description>
            </param>
        </return>
    </command>
    <command name="exactGeodesic">
        <description>The discrete geodesic distance between two points is the length of the shortest path between then restricted to the surface. For triangle meshes, such a path is made of a set of segments which can be either edges of the mesh or crossing a triangle.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="vs" type="table" item-type="int">
                <description>indices of source vertices</description>
            </param>
            <param name="fs" type="table" item-type="int">
                <description>indices of source faces</description>
            </param>
            <param name="vt" type="table" item-type="int">
                <description>indices of target vertices</description>
            </param>
            <param name="ft" type="table" item-type="int">
                <description>indices of target faces</description>
            </param>
        </params>
        <return>
            <param name="distances" type="table" item-type="double">
                <description>output vector which lists first the distances for the target vertices, and then for the target faces</description>
            </param>
        </return>
    </command>
    <command name="uniqueEdgeMap">
        <description>Construct relationships between facet "half"-(or rather "viewed")-edges E to unique edges of the mesh seen as a graph.</description>
        <params>
            <param name="f" type="grid" item-type="int" size="*,3">
                <description>list of simplices</description>
            </param>
        </params>
        <return>
            <param name="e" type="grid" item-type="int">
                <description>list of all directed edges, such that E.row(f+#F*c) is the edge opposite F(f,c)</description>
            </param>
            <param name="ue" type="grid" item-type="int">
                <description>list of unique undirected edges</description>
            </param>
            <param name="emap" type="grid" item-type="int">
                <description>list of indices into uE, mapping each directed edge to unique undirected edge so that uE(EMAP(f+#F*c)) is the unique edge corresponding to E.row(f+#F*c)</description>
            </param>
            <param name="uec" type="grid" item-type="int">
                <description>list of cumulative counts of directed edges sharing each unique edge so the uEC(i+1)-uEC(i) is the number of directed edges sharing the ith unique edge</description>
            </param>
            <param name="uee" type="grid" item-type="int">
                <description>list of indices into E, so that the consecutive segment of indices uEE.segment(uEC(i),uEC(i+1)-uEC(i)) lists all directed edges sharing the ith unique edge</description>
            </param>
        </return>
    </command>
    <command name="closestFacet">
        <description>Determine the closest facet for each of the input points.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="points" type="grid" item-type="double" size="*,3">
                <description>query points</description>
            </param>
            <param name="emap" type="grid" item-type="int">
                <description>list of indices into uE, mapping each directed edge to unique undirected edge so that uE(EMAP(f+#F*c)) is the unique edge corresponding to E.row(f+#F*c)</description>
            </param>
            <param name="uec" type="grid" item-type="int">
                <description>list of cumulative counts of directed edges sharing each unique edge so the uEC(i+1)-uEC(i) is the number of directed edges sharing the ith unique edge</description>
            </param>
            <param name="uee" type="grid" item-type="int">
                <description>list of indices into E, so that the consecutive segment of indices uEE.segment(uEC(i),uEC(i+1)-uEC(i)) lists all directed edges sharing the ith unique edge</description>
            </param>
            <param name="indices" type="table" item-type="int" default="{}">
                <description>indices of faces to consider, or empty for all</description>
            </param>
        </params>
        <return>
            <param name="r" type="table" item-type="int">
                <description>list of closest face indices, same size as p</description>
            </param>
            <param name="s" type="table" item-type="int">
                <description>list of bools indicating on which side of the facet each query point lies, same size as p</description>
            </param>
        </return>
    </command>
    <command name="upsample">
        <description>Subdivide a mesh without moving vertices: loop subdivision but odd vertices stay put and even vertices are just edge midpoints.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="n" type="int" default="1">
                <description>number of subdivisions</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>subdivided mesh</description>
            </param>
        </return>
    </command>
    <command name="centroid">
        <description>Computes the centroid of a closed mesh using a surface integral.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
        </params>
        <return>
            <param name="c" type="table" item-type="double" size="3">
                <description>vector of centroid coordinates</description>
            </param>
            <param name="vol" type="double">
                <description>total volume of solid</description>
            </param>
        </return>
    </command>
    <command name="barycenter">
        <description>Computes the barycenter of every simplex.</description>
        <params>
            <param name="v" type="grid" item-type="double" size="*,3">
                <description>vertex position list</description>
            </param>
            <param name="f" type="grid" item-type="int" size="*,4">
                <description>indices of simplex corners into V</description>
            </param>
        </params>
        <return>
            <param name="bc" type="grid" item-type="double" size="*,3">
                <description>matrix of vertices</description>
            </param>
        </return>
    </command>
    <command name="tetrahedralize">
        <description>Mesh the interior of a surface mesh using tetgen.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="switches" type="string" default='""'>
                <description>string of tetgen options (See tetgen documentation) e.g. "pq1.414a0.01" tries to mesh the interior of a given surface with quality and area constraints; "" will mesh the convex hull constrained to pass through V (ignores F)</description>
            </param>
        </params>
        <return>
            <param name="result" type="int">
                <description>Returns status: 0 success; 1 tetgen threw exception; 2 tetgen did not crash but could not create any tets (probably there are holes, duplicate faces etc.); -1 other error</description>
            </param>
            <param name="m" type="tetmesh">
                <description>tet mesh</description>
            </param>
            <param name="tf" type="grid" item-type="int" size="*,3">
                <description>surface triangles (indices into tetmesh's vertices)</description>
            </param>
        </return>
    </command>
    <command name="convexHull">
        <description>Given a set of points, compute the convex hull as a triangle mesh.</description>
        <params>
            <param name="points" type="table" item-type="double">
                <description>mesh</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
        </return>
    </command>
    <command name="intersectWithHalfSpace">
        <description>Intersect a PWN mesh with a half-space. Point on plane, normal pointing outward.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="pt" type="table" item-type="double" size="3">
                <description>point on plane</description>
            </param>
            <param name="n" type="table" item-type="double" size="3">
                <description>normal of plane pointing away from inside</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>result mesh</description>
            </param>
            <param name="j" type="table" item-type="int">
                <description>list of indices into [F;F.rows()+[1;2]] revealing "birth" facet</description>
            </param>
        </return>
    </command>
    <command name="volume">
        <description>Compute volume for all tets of a given tet mesh.</description>
        <params>
            <param name="m" type="tetmesh">
                <description>tet mesh</description>
            </param>
        </params>
        <return>
            <param name="vol" type="table" item-type="double">
                <description>list of tetrahedron volumes</description>
            </param>
        </return>
    </command>
    <command name="boundaryFacets">
        <description>Compute the boundary facets of a given tet mesh.</description>
        <params>
            <param name="m" type="tetmesh">
                <description>tet mesh</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>result mesh</description>
            </param>
        </return>
    </command>
    <command name="adaptiveUpsample">
        <description>Divide triangles with an edge longer than given threshold.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="threshold" type="double">
                <description>maximum triangle edge length</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>list of tetrahedron volumes</description>
            </param>
        </return>
    </command>
    <command name="faceCentroids">
        <description>Computes the centroid of mesh faces.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
        </params>
        <return>
            <param name="c" type="grid" item-type="double" size="*,3">
                <description>centroid coordinates</description>
            </param>
        </return>
    </command>
    <command name="meshOctreeIntersection">
        <description>Computes the part of mesh intersecting the given octree.</description>
        <params>
            <param name="m" type="mesh">
                <description>mesh</description>
            </param>
            <param name="oc" type="int">
                <description>handle of octree</description>
            </param>
        </params>
        <return>
            <param name="m" type="mesh">
                <description>intersecting mesh subset</description>
            </param>
        </return>
    </command>
    <struct name="mesh">
        <param name="vertices" type="table" item-type="double">
            <description>vertices of the mesh (3 * n values)</description>
        </param>
        <param name="indices" type="table" item-type="int">
            <description>triangle indices of the mesh (3 * m indices, zero-based)</description>
        </param>
        <param name="normals" type="table" item-type="double" nullable="true">
            <description>per-vertex normals (3 * n values)</description>
        </param>
    </struct>
    <struct name="tetmesh">
        <param name="vertices" type="table" item-type="double">
            <description>vertices of the mesh (3 * n values)</description>
        </param>
        <param name="indices" type="table" item-type="int">
            <description>tetrahedra indices of the mesh (4 * m indices, zero-based)</description>
        </param>
    </struct>
    <enum name="boolean_op" item-prefix="bool_op_" base="2630">
        <item name="union" />
        <item name="intersection" />
        <item name="difference" />
        <item name="symmetric_difference" />
        <item name="resolve" />
    </enum>
    <script-function name="transformCallback">
        <description>Callback used by <command-ref name="sweptVolume" />.</description>
        <params>
            <param name="t" type="double">
                <description>time parameter in 0..1 range</description>
            </param>
        </params>
        <return>
            <param name="transform" type="table" item-type="double">
                <description>a 4x4 transform matrix as 12/16 values</description>
            </param>
        </return>
    </script-function>
</plugin>
